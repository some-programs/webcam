// Code generated by "enumer -type=ViewType -trimprefix ViewType"; DO NOT EDIT.

package main

import (
	"fmt"
	"strings"
)

const _ViewTypeName = "MainHelp"

var _ViewTypeIndex = [...]uint8{0, 4, 8}

const _ViewTypeLowerName = "mainhelp"

func (i ViewType) String() string {
	if i < 0 || i >= ViewType(len(_ViewTypeIndex)-1) {
		return fmt.Sprintf("ViewType(%d)", i)
	}
	return _ViewTypeName[_ViewTypeIndex[i]:_ViewTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ViewTypeNoOp() {
	var x [1]struct{}
	_ = x[ViewTypeMain-(0)]
	_ = x[ViewTypeHelp-(1)]
}

var _ViewTypeValues = []ViewType{ViewTypeMain, ViewTypeHelp}

var _ViewTypeNameToValueMap = map[string]ViewType{
	_ViewTypeName[0:4]:      ViewTypeMain,
	_ViewTypeLowerName[0:4]: ViewTypeMain,
	_ViewTypeName[4:8]:      ViewTypeHelp,
	_ViewTypeLowerName[4:8]: ViewTypeHelp,
}

var _ViewTypeNames = []string{
	_ViewTypeName[0:4],
	_ViewTypeName[4:8],
}

// ViewTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ViewTypeString(s string) (ViewType, error) {
	if val, ok := _ViewTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ViewTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ViewType values", s)
}

// ViewTypeValues returns all values of the enum
func ViewTypeValues() []ViewType {
	return _ViewTypeValues
}

// ViewTypeStrings returns a slice of all String values of the enum
func ViewTypeStrings() []string {
	strs := make([]string, len(_ViewTypeNames))
	copy(strs, _ViewTypeNames)
	return strs
}

// IsAViewType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ViewType) IsAViewType() bool {
	for _, v := range _ViewTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
